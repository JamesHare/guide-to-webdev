{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Guide to Web Development In these GitHub pages, I will include notes from various classes I have taken to learn Web Development (WebDev). We will start off with a high-level overview of the three main components of WebDev: HTML, CSS and JavaScript. Then we will take a deeper dive and also look at a few advanced libraries and frameworks like React.","title":"Home"},{"location":"#guide-to-web-development","text":"In these GitHub pages, I will include notes from various classes I have taken to learn Web Development (WebDev). We will start off with a high-level overview of the three main components of WebDev: HTML, CSS and JavaScript. Then we will take a deeper dive and also look at a few advanced libraries and frameworks like React.","title":"Guide to Web Development"},{"location":"about/","text":"About Author James Hare Email: harejamesm@gmail.com LinkedIn: https://www.linkedin.com/in/jameshareuk GitHub Portfolio: https://github.com/JamesHare","title":"About"},{"location":"about/#about","text":"","title":"About"},{"location":"about/#author","text":"James Hare Email: harejamesm@gmail.com LinkedIn: https://www.linkedin.com/in/jameshareuk GitHub Portfolio: https://github.com/JamesHare","title":"Author"},{"location":"intro-to-webdev/css/","text":"Cascading Style Sheets (CSS) Where did it come from? In 1994, CCS was proposed as a stylesheet language. Other languages were also being proposed a tthe time. However, the World Wide Web Condortium, who were already working on the HTML standard, added CSS to the deliverables of the HTML working group. This resulted in the official recommendation of the CCS level 1 standard in 1996. Such a recommendation is considerd a specification that all web broswers should adapt to handle CCS. What is it? CSS is a style sheet language used for describing the presentation of a document written in a markup language. We can link to an external stylesheet by using the following tag in the tag of our HTML document: <link rel=\"stylesheet\" type=\"text/css\" href=\"StyleSheet.css\"> In the style sheet, we will define the styles that we want to use. It's contents might look something like this: div { color: blue; } .italic { font-style: italic; } By extracting out the ccs into it's own .css page, we can reuse the styles in multiple HTML documents. As we can see above, css consists of properties and attributes like the color being blue and the text being italic. CSS can indicate which element these properties should be applied. We do this by using selectors. For example above, the div property will be applied to all of the dev elements in an html page. In the following example, the ccs will be applied to all of the elements that have a class attribute set to class1: .class1 { color: blue; } In the next example, we are specifying an \"id\". The css will be applied to all html elements that have an id of para1. #para1 { color: blue; } You can also nest things as follows. This css will be applied to all paragraph elements that have a div element as their parent: div p { text-align: enter; color: red; } The following example shows how we can apply css to multiple elements on an html page (h1, h2 and p elements will use the ccs): h1, h2, p { text-align: center; color: red; } CSS is called cascading because properties are applied based on priority. Order of priority is \"selector\", \"class\" and then \"id\". This means that if an element has attributes from all three, and say background-color is being specified in all three, then only the background-color specified in the \"id\" section will be applied. It will overwrite the background-color specified in class. In the same way, class would override the background-color in the selector if it is not specified in the id. Another way to override this further is to use the !important value as shown below: .specific { boarder: none !important; } There are some advanced capabilities of css. An exmaple is as follows: @media screen and (min-width: 480px) { body { background-color: lightgreen; } } In the example above, we are telling the web browser that whenever we are displaying html on the screen, as apposed to when we print a page, and when the screen has a minimum width of 480 pixels, we want the body element to have the background color of lightgreen. This allows for a more responsive webpage, for instance if our webpage is being displayed on a smart phone vs a laptop. One of the most popular libraries for css is called \"bootstrap\". It allows us to easily creat responsive web pages.","title":"CSS"},{"location":"intro-to-webdev/css/#cascading-style-sheets-css","text":"","title":"Cascading Style Sheets (CSS)"},{"location":"intro-to-webdev/css/#where-did-it-come-from","text":"In 1994, CCS was proposed as a stylesheet language. Other languages were also being proposed a tthe time. However, the World Wide Web Condortium, who were already working on the HTML standard, added CSS to the deliverables of the HTML working group. This resulted in the official recommendation of the CCS level 1 standard in 1996. Such a recommendation is considerd a specification that all web broswers should adapt to handle CCS.","title":"Where did it come from?"},{"location":"intro-to-webdev/css/#what-is-it","text":"CSS is a style sheet language used for describing the presentation of a document written in a markup language. We can link to an external stylesheet by using the following tag in the tag of our HTML document: <link rel=\"stylesheet\" type=\"text/css\" href=\"StyleSheet.css\"> In the style sheet, we will define the styles that we want to use. It's contents might look something like this: div { color: blue; } .italic { font-style: italic; } By extracting out the ccs into it's own .css page, we can reuse the styles in multiple HTML documents. As we can see above, css consists of properties and attributes like the color being blue and the text being italic. CSS can indicate which element these properties should be applied. We do this by using selectors. For example above, the div property will be applied to all of the dev elements in an html page. In the following example, the ccs will be applied to all of the elements that have a class attribute set to class1: .class1 { color: blue; } In the next example, we are specifying an \"id\". The css will be applied to all html elements that have an id of para1. #para1 { color: blue; } You can also nest things as follows. This css will be applied to all paragraph elements that have a div element as their parent: div p { text-align: enter; color: red; } The following example shows how we can apply css to multiple elements on an html page (h1, h2 and p elements will use the ccs): h1, h2, p { text-align: center; color: red; } CSS is called cascading because properties are applied based on priority. Order of priority is \"selector\", \"class\" and then \"id\". This means that if an element has attributes from all three, and say background-color is being specified in all three, then only the background-color specified in the \"id\" section will be applied. It will overwrite the background-color specified in class. In the same way, class would override the background-color in the selector if it is not specified in the id. Another way to override this further is to use the !important value as shown below: .specific { boarder: none !important; } There are some advanced capabilities of css. An exmaple is as follows: @media screen and (min-width: 480px) { body { background-color: lightgreen; } } In the example above, we are telling the web browser that whenever we are displaying html on the screen, as apposed to when we print a page, and when the screen has a minimum width of 480 pixels, we want the body element to have the background color of lightgreen. This allows for a more responsive webpage, for instance if our webpage is being displayed on a smart phone vs a laptop. One of the most popular libraries for css is called \"bootstrap\". It allows us to easily creat responsive web pages.","title":"What is it?"},{"location":"intro-to-webdev/html/","text":"Hypertext Markup Language (HTML) Where did it come from? HTML was originally specified in 1990 by Tim Berners-Lee and drafted in 1993 by the Internet Engineering Task Force (IETF). What is it? HTML is the standard markup language for creating web pages and web applications. The things that you see in websites and web applications are rendered from the web broser from HTML documents. HTML docuemnts contained variaour elements that are specified in the HTML specification and can be understood by all web browsers. The first element in any HTML docuemnt is the <!DOCTYPE html> element. This tells the browser that this is an HTML docuemnt and tells it which version of HTML it is written in. The doc type mentioned is for HTML5. Next are the <html></html> elements. Every element has an open and a close element. This tells the broswer that everything inbetween is in html. Then there is the <head></head> elements. This can include a title for the docuement, scripts, styles, meta information and more. Finally, there is the <body></body> element that contains everything that you want to be displayed on the screen. These are the basic requirements of creating an html document. Let's talk about some other elements that you can use outside of the standard ones listed above. The <header></header> elements represent a container for introductory content or a set of navigational links. This can contain a <nav> tag that defines a set of navigation links. There is the <main> tag that specifies the main content of the docuemnt and inside the <main> tag, you can find things like an <article> tag that specifies independent content and an <aside> tag that defines some content aside from the content it is placed in. Finally, just like there is a <header> elelemt, there is a <footer> tag which contains stuff like copyright or the address of your company. There are also elements that allow you to have more interaction with the browser. There is an <audio> tag that you can use to have the broswer play audio. There is the <canvas> tag which gives you a space for your to \"draw\" on in your website and display custom shapes. More commonly, there is the <form> tag which is the basis for most interactive websites and applications. You can use this to post information from the broswer to the server that is hosting your website. For instance, text that a user enters in a text field. Within the form, there will be a button of the type submit which a user can click on to send information to the server. Finally, there is a <video> tag that can play videos in the broswer.","title":"HTML"},{"location":"intro-to-webdev/html/#hypertext-markup-language-html","text":"","title":"Hypertext Markup Language (HTML)"},{"location":"intro-to-webdev/html/#where-did-it-come-from","text":"HTML was originally specified in 1990 by Tim Berners-Lee and drafted in 1993 by the Internet Engineering Task Force (IETF).","title":"Where did it come from?"},{"location":"intro-to-webdev/html/#what-is-it","text":"HTML is the standard markup language for creating web pages and web applications. The things that you see in websites and web applications are rendered from the web broser from HTML documents. HTML docuemnts contained variaour elements that are specified in the HTML specification and can be understood by all web browsers. The first element in any HTML docuemnt is the <!DOCTYPE html> element. This tells the browser that this is an HTML docuemnt and tells it which version of HTML it is written in. The doc type mentioned is for HTML5. Next are the <html></html> elements. Every element has an open and a close element. This tells the broswer that everything inbetween is in html. Then there is the <head></head> elements. This can include a title for the docuement, scripts, styles, meta information and more. Finally, there is the <body></body> element that contains everything that you want to be displayed on the screen. These are the basic requirements of creating an html document. Let's talk about some other elements that you can use outside of the standard ones listed above. The <header></header> elements represent a container for introductory content or a set of navigational links. This can contain a <nav> tag that defines a set of navigation links. There is the <main> tag that specifies the main content of the docuemnt and inside the <main> tag, you can find things like an <article> tag that specifies independent content and an <aside> tag that defines some content aside from the content it is placed in. Finally, just like there is a <header> elelemt, there is a <footer> tag which contains stuff like copyright or the address of your company. There are also elements that allow you to have more interaction with the browser. There is an <audio> tag that you can use to have the broswer play audio. There is the <canvas> tag which gives you a space for your to \"draw\" on in your website and display custom shapes. More commonly, there is the <form> tag which is the basis for most interactive websites and applications. You can use this to post information from the broswer to the server that is hosting your website. For instance, text that a user enters in a text field. Within the form, there will be a button of the type submit which a user can click on to send information to the server. Finally, there is a <video> tag that can play videos in the broswer.","title":"What is it?"},{"location":"intro-to-webdev/javascript/","text":"JavaScript Where did it come from? In the early 1990's, the Netscape Navigator web browser dominated the browser market. The founder of Netscape believed that HTML needed a glue language that was easy to use by web designers. For this purpose, Netscape hired Brandon Ike in 1995 to integrate the scheme programming language into Netscape Navigator. He created a prototype of what he called Live Script in 1995. Later in the year, it was renamed and released as JavaScript. What is it? JavaScript is a high-level, interpreted programming language. Being an interpreted langauge means that you don't have to compile the code before you execute it. It is interpreted at runtime. Being a high-level language means that it is a high abstraction from the computer. In contrast, the C programming language is a low-level language that gives you more control over things like memory management. JavaScript != Java! JavaScript can be used the manipulate HTML, the browser, and to talk to servers. In the following example, we can see how writing \"in-line\" JavaScript is possible: <body> <button type=\"button\" onclick=\"document.getElementById('demo').innerHTML = Date()\"> See the date </button> <p id=\"demo\"></p> </body> The code above will display a button that has the text \"See the date\" on it. When the user clicks the button, it will select the element with the id \"demo\" and then set the inner HTML of that to the complete current date and time with the call to Date(). Let's look an another way to write the above code, in a full HTML document: <!DOCTYPE html> <html> <head> <title>My HTML page!</title> <script> function ShowDate() { document.getElementById('demo').innerHTML = Date(); } </script> </head> <body> <button type=\"button\" onclick=\"ShowDate();\"> See the date <button> <p id=\"demo\"></p> </body> </html> This is the exact same HTML and JavaScript code. The only difference is that we moved the JavaScript code into a function within a script tag in the head tag. This makes it reusable on other buttons that we may wish to implement. Let's break it out further and see another way we could implement this functionality: HTML Document <!DOCTYPE html> <html> <head> <title>My HTML page!</title> </head> <body> <button type=\"button\" onclick=\"ShowDate();\"> See the date <button> <p id=\"demo\"></p> <script src=\"ScriptFile.js\"></script> </body> </html> ScriptFile.js function ShowDate() { document.getElementById('demo') .innerHTML = Date(); } This is the same HTML as before, except that we extracted out the ShowDate() function into its own JavaScript file. We reference the JavaScript file from within the HTML document. By doing this, we allow it to be reusable across multiple HTML documents. We can also use JavaScript to interact with the web broswer. The following example opens up a promt from the window object and asks for a name, which it then stores in the name object. If there was a name entered, the text variable gets the value of \"Hello\" with the entered name. Finally, it is displaued in the \"name\" element. <script> function PromptUser() { var txt; var name = window.prompt(\"Enter your name\"); if (name != null || name != \"\") { txt = \"Hello \" + name; } document.getElementById(\"name\").innerHTML = txt; } </script> We can also make AJAX calls. Using AJAX you can do all sorts of interactive and advanced things in the browser without having to refresh the page. AJAX stands for Asynchronous JavaScript and XML. In your web browser, you may have loaded your HTML document and some JavaScript from an external .js file. From the browser you might have the need to call an external API which returns a .txt file to be viewed in the browser. The point is that you can call server-side code without the need to refresh your browser. Let's take a look at an axample of AJAX: <!DOCTYPE html> <html> <body> <div id=\"demo\"> <h2>My Ajax Page</h2> <button type=\"button\" onclick=\"loadDoc()\">Change Content</button> </div> <script> function loadDoc() { var xhttp = new XMLHttpRequest(); xhttp.onreadystatechange = function() { if (this.readState == 4 && this.status == 200) { document.getElementById(\"demo\").innerHTML = this.responseText; } }; xhttp.open(\"GET\", \"ajax_info.txt\", true); xhttp.send(); } </script> </body> </html> In the code above, a button will be displayed that, when clicked, will call the loadDoc() JavaScript function. This function uses Ajax. It uses the XMLHttpRequest object in JavaScript. You can use this object to make calls to servers that are somewhere else, without having to refresh the page. This is the essence of the Ajax technique. In the code above, we attach the inner function to the xhttp object. The funtion fires when the state of the object changes, which is when a call is made to an external server. The inner function also updates the innerHTML of the div with the id of \"demo\". It gets the text to put in the div from a document that it gets from calling the xhttp.open() function. We could have also used any url in place of the .txt file. In short, we can use the Ajax Technique to call API's and work with results from external calls without needing to refresh the web page. Here are a list of JavaScript libraries that you may want to take a look at for next steps: JQuery Dojo Toolkit Prototype.js Bootstrap Velocity.js D3.js Some more advanced libraries and frameworks include: Angular Backbone.js Ember.js Knockout Node.js Vue.js React TypeScript","title":"JavaScript"},{"location":"intro-to-webdev/javascript/#javascript","text":"","title":"JavaScript"},{"location":"intro-to-webdev/javascript/#where-did-it-come-from","text":"In the early 1990's, the Netscape Navigator web browser dominated the browser market. The founder of Netscape believed that HTML needed a glue language that was easy to use by web designers. For this purpose, Netscape hired Brandon Ike in 1995 to integrate the scheme programming language into Netscape Navigator. He created a prototype of what he called Live Script in 1995. Later in the year, it was renamed and released as JavaScript.","title":"Where did it come from?"},{"location":"intro-to-webdev/javascript/#what-is-it","text":"JavaScript is a high-level, interpreted programming language. Being an interpreted langauge means that you don't have to compile the code before you execute it. It is interpreted at runtime. Being a high-level language means that it is a high abstraction from the computer. In contrast, the C programming language is a low-level language that gives you more control over things like memory management. JavaScript != Java! JavaScript can be used the manipulate HTML, the browser, and to talk to servers. In the following example, we can see how writing \"in-line\" JavaScript is possible: <body> <button type=\"button\" onclick=\"document.getElementById('demo').innerHTML = Date()\"> See the date </button> <p id=\"demo\"></p> </body> The code above will display a button that has the text \"See the date\" on it. When the user clicks the button, it will select the element with the id \"demo\" and then set the inner HTML of that to the complete current date and time with the call to Date(). Let's look an another way to write the above code, in a full HTML document: <!DOCTYPE html> <html> <head> <title>My HTML page!</title> <script> function ShowDate() { document.getElementById('demo').innerHTML = Date(); } </script> </head> <body> <button type=\"button\" onclick=\"ShowDate();\"> See the date <button> <p id=\"demo\"></p> </body> </html> This is the exact same HTML and JavaScript code. The only difference is that we moved the JavaScript code into a function within a script tag in the head tag. This makes it reusable on other buttons that we may wish to implement. Let's break it out further and see another way we could implement this functionality: HTML Document <!DOCTYPE html> <html> <head> <title>My HTML page!</title> </head> <body> <button type=\"button\" onclick=\"ShowDate();\"> See the date <button> <p id=\"demo\"></p> <script src=\"ScriptFile.js\"></script> </body> </html> ScriptFile.js function ShowDate() { document.getElementById('demo') .innerHTML = Date(); } This is the same HTML as before, except that we extracted out the ShowDate() function into its own JavaScript file. We reference the JavaScript file from within the HTML document. By doing this, we allow it to be reusable across multiple HTML documents. We can also use JavaScript to interact with the web broswer. The following example opens up a promt from the window object and asks for a name, which it then stores in the name object. If there was a name entered, the text variable gets the value of \"Hello\" with the entered name. Finally, it is displaued in the \"name\" element. <script> function PromptUser() { var txt; var name = window.prompt(\"Enter your name\"); if (name != null || name != \"\") { txt = \"Hello \" + name; } document.getElementById(\"name\").innerHTML = txt; } </script> We can also make AJAX calls. Using AJAX you can do all sorts of interactive and advanced things in the browser without having to refresh the page. AJAX stands for Asynchronous JavaScript and XML. In your web browser, you may have loaded your HTML document and some JavaScript from an external .js file. From the browser you might have the need to call an external API which returns a .txt file to be viewed in the browser. The point is that you can call server-side code without the need to refresh your browser. Let's take a look at an axample of AJAX: <!DOCTYPE html> <html> <body> <div id=\"demo\"> <h2>My Ajax Page</h2> <button type=\"button\" onclick=\"loadDoc()\">Change Content</button> </div> <script> function loadDoc() { var xhttp = new XMLHttpRequest(); xhttp.onreadystatechange = function() { if (this.readState == 4 && this.status == 200) { document.getElementById(\"demo\").innerHTML = this.responseText; } }; xhttp.open(\"GET\", \"ajax_info.txt\", true); xhttp.send(); } </script> </body> </html> In the code above, a button will be displayed that, when clicked, will call the loadDoc() JavaScript function. This function uses Ajax. It uses the XMLHttpRequest object in JavaScript. You can use this object to make calls to servers that are somewhere else, without having to refresh the page. This is the essence of the Ajax technique. In the code above, we attach the inner function to the xhttp object. The funtion fires when the state of the object changes, which is when a call is made to an external server. The inner function also updates the innerHTML of the div with the id of \"demo\". It gets the text to put in the div from a document that it gets from calling the xhttp.open() function. We could have also used any url in place of the .txt file. In short, we can use the Ajax Technique to call API's and work with results from external calls without needing to refresh the web page. Here are a list of JavaScript libraries that you may want to take a look at for next steps: JQuery Dojo Toolkit Prototype.js Bootstrap Velocity.js D3.js Some more advanced libraries and frameworks include: Angular Backbone.js Ember.js Knockout Node.js Vue.js React TypeScript","title":"What is it?"},{"location":"intro-to-webdev/overview/","text":"Overview Before jumping right into Web Development, it's important to know how the World Wide Web (WWW) works. Here's a very quick explination. The web works because of the Internet. When a web browser requests a document via a Uniform Resource Locator (URL), the webserver hosting the website returns the HTML document through the Hypertext Transfer Protocol (HTTP). The HTML document that gets rendered and \"painted\" on the screen. It gets formatted and styled with CCS, and it gets functionality from JavaScript. These three langages are the core basics of web developement. HTML, CCS and JavaScript. In this first module, we will focus on all three.","title":"Module Overview"},{"location":"intro-to-webdev/overview/#overview","text":"Before jumping right into Web Development, it's important to know how the World Wide Web (WWW) works. Here's a very quick explination. The web works because of the Internet. When a web browser requests a document via a Uniform Resource Locator (URL), the webserver hosting the website returns the HTML document through the Hypertext Transfer Protocol (HTTP). The HTML document that gets rendered and \"painted\" on the screen. It gets formatted and styled with CCS, and it gets functionality from JavaScript. These three langages are the core basics of web developement. HTML, CCS and JavaScript. In this first module, we will focus on all three.","title":"Overview"}]}